"use strict";(self.webpackChunkckb_sdk=self.webpackChunkckb_sdk||[]).push([[8877],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>h});var n=a(7294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var c=n.createContext({}),s=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,c=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=s(a),h=o,k=u["".concat(c,".").concat(h)]||u[h]||p[h]||r;return a?n.createElement(k,i(i({ref:t},d),{},{components:a})):n.createElement(k,i({ref:t},d))}));function h(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,i=new Array(r);i[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var s=2;s<r;s++)i[s]=a[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},5589:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>d});var n=a(3117),o=(a(7294),a(3905)),r=a(4996);const i={id:"gwtxLife",title:"Godwoken Transaction"},l=void 0,c={unversionedId:"gwtxLife",id:"version-1.5/gwtxLife",title:"Godwoken Transaction",description:"Godwoken is a layer 2 rollup framework for Nervos CKB. It provides scalability and an account-based programming model to CKB. For an overview of Godwoken see this post. This article dives into the innards of Godwoken, explains how it works, and how each individual piece fits together.",source:"@site/versioned_docs/version-1.5/gwtxLife.md",sourceDirName:".",slug:"/gwtxLife",permalink:"/1.5/gwtxLife",draft:!1,tags:[],version:"1.5",frontMatter:{id:"gwtxLife",title:"Godwoken Transaction"},sidebar:"sidebar2",previous:{title:"Tokens",permalink:"/1.5/tokens"},next:{title:"Scripts",permalink:"/1.5/gwScripts"}},s={},d=[{value:"Rollup Layer 2 Chain",id:"rollup-layer-2-chain",level:2},{value:"Storage",id:"storage",level:3},{value:"Optimistic Rollup",id:"optimistic-rollup",level:3},{value:"Multiple Block Producers",id:"multiple-block-producers",level:3},{value:"Actions",id:"actions",level:2},{value:"Deposit",id:"deposit",level:3},{value:"Layer 2 Transfer",id:"layer-2-transfer",level:3},{value:"Account Locks",id:"account-locks",level:3},{value:"Backend",id:"backend",level:3},{value:"SUDT",id:"sudt",level:3},{value:"MetaContract",id:"metacontract",level:3},{value:"Polyjuice",id:"polyjuice",level:3},{value:"Managing Account Locks &amp; Backends",id:"managing-account-locks--backends",level:3},{value:"Withdraw",id:"withdraw",level:3}],p={toc:d};function u(e){let{components:t,...a}=e;return(0,o.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Godwoken is a layer 2 rollup framework for ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/ckb"},"Nervos CKB"),". It provides scalability and an account-based programming model to CKB. For an overview of Godwoken see ",(0,o.kt)("a",{parentName:"p",href:"https://medium.com/nervosnetwork/towards-ckb-style-lego-pieces-polyjuice-on-godwoken-cbc935d77abf"},"this post"),". This article dives into the innards of Godwoken, explains how it works, and how each individual piece fits together."),(0,o.kt)("h2",{id:"rollup-layer-2-chain"},"Rollup Layer 2 Chain"),(0,o.kt)("p",null,"Godwoken is fundamentally a layer 2 solution to the layer 1 of Nervos CKB blockchain. ",(0,o.kt)("a",{parentName:"p",href:"https://pudge.explorer.nervos.org/address/ckt1qpuljza4azfdsrwjzdpea6442yfqadqhv7yzfu5zknlmtusm45hpuqgqcfn63wfumts4lvrryhc35u43q3aaf5euqq6zeas9"},"Here")," is an example of a Godwoken deployment on CKB testnet. Layer 2 blocks are submitted to layer 1 in ",(0,o.kt)("strong",{parentName:"p"},"block submission transactions")," that generate CKB cells with cell data containing the current state of the Godwoken blockchain. For more information about block submission transactions, ",(0,o.kt)("a",{parentName:"p",href:"https://pudge.explorer.nervos.org/transaction/0x9fd03b09d27326aa54dc53e11d7f7c01f27e570bdc645233b91664323cac0568"},"see the transaction"),". As of this layer 2 block, the chain state is as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},"0xa0cf6037bfc238b179b74a30a9b12e15a4fbdd8881aebc8e5a66a8b5b5c95f0a4ca62a4c652697c96b7e02eea3a1bc21c5369bcb30626b9aee1cbb1babea11ff4f16000055a255f47f22b6f8ed1a025f971d60528f5407b7c71745c8c493a51a631bb4bfab6f000000000000000000000000000000000000000000000000000000000000000000000000000047ee34be61c51e026838c5348ab0ca3566eed50dc9b3dc676fe16a7f7d72f80fcfe4f3d680010000466f0000000000000001\n")),(0,o.kt)("p",null,"This is actually a ",(0,o.kt)("inlineCode",{parentName:"p"},"GlobalState")," data structure serialized in ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/molecule"},"molecule")," format:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},"struct GlobalState {\n    rollup_config_hash: Byte32,\n    account: AccountMerkleState,\n    block: BlockMerkleState,\n    reverted_block_root: Byte32,\n    tip_block_hash: Byte32,\n    tip_block_timestamp: Uint64,\n    last_finalized_block_number: Uint64,\n    // 0: running, 1: halting\n    status: byte,\n    version: byte,\n}\n")),(0,o.kt)("p",null,"More definitions can be found in ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/godwoken/blob/v1.1.0-beta/crates/types/schemas/godwoken.mol"},"this file"),"."),(0,o.kt)("p",null,"The block submission transaction also contains the actual layer 2 Godwoken block. The first witness of the ",(0,o.kt)("a",{parentName:"p",href:"https://pudge.explorer.nervos.org/transaction/0x9fd03b09d27326aa54dc53e11d7f7c01f27e570bdc645233b91664323cac0568"},"transaction")," mentioned above contains the following data:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"0x600300001000000069000000690000005500000055000000100000005500000055000000410000004082de966ef59f3777d5c6b447d7912a457cb6bffc6317f336b03f39930c4c0f474779d431f4832a4779a804880f0d1ff4e9a48554ca8e85b56511c982c2094400f302000000000000ef02000010000000e7020000eb020000d70200001c0000006c010000700100007401000078010000d3020000500100002c000000340000005400000074000000940000009c000000c0000000e4000000e80000000c010000aa6f0000000000001c0000000200000014000000715ab282b873b79a7be8b0e8c13c4e8966a52040c822d671a8097366aacd98746a00407cd378b54b2facb8ac8fe8970e447ced1ff245705db4fe72be953e4f9ee3808a1700a578341aa80a8b2349c236c4af64e5cfe4f3d6800100004ca62a4c652697c96b7e02eea3a1bc21c5369bcb30626b9aee1cbb1babea11ff4f1600004ca62a4c652697c96b7e02eea3a1bc21c5369bcb30626b9aee1cbb1babea11ff4f1600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011b7aeea1224e8e80173fe93db2187d0251d4b41f00e61fe3c3433f0e6953800000000000000000004000000570100004c4f0150f4dad550e8b95696636f041140059724eacb55453d70a18072520c97411ae6b64f01501e5a5863aa3e7d66c1e19a26b1eaac8183aa59e9ce8d77db4e2cb30b65d95b534f01505677593a7fbb2a4ecf82f3b1f7bee953c0199d4c9d6552154a95d844635901e64f0150870913864cfddf50dc51a88b5ca5b8bdf95c476a068fbd2eaa19398318703af05060f8c8c082fafd59eca27762ccbebc580271e0bac92f7a381c739d1954f1c6c9508c4c5f7fb230bee4a9877f3039feb2675dd44d04e8ac0e41dd9f9e13f277119f503e6ee57e32132b778b0e14a9a06b185c73c4a4d01b6cab9370991c3897f90f7050dc2f0723654791da20e1dc7713e167d58c71ceac4839364a6e5033f07f00efc14f0150ad18935a95613207b9baec1fb60f35eab69f273e3423ddb58cb37d886205488650b32cd6babf0fd7a5506a00365d252bc7162f527f4123ec22dcb51ad9336797294ff1040000000000000000000000\n")),(0,o.kt)("p",null,"This is actually the ",(0,o.kt)("inlineCode",{parentName:"p"},"WitnessArgs")," data structure described ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/godwoken/blob/v1.1.0-beta/crates/types/schemas/blockchain.mol#L116"},"here")," and is serialized in the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/molecule"},"molecule")," format. In the ",(0,o.kt)("inlineCode",{parentName:"p"},"output_type")," field of WitnessArgs, the actual ",(0,o.kt)("inlineCode",{parentName:"p"},"L2Block")," data structure is stored and serialized in the molecule format:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"table L2Block {\n    raw: RawL2Block,\n    kv_state: KVPairVec,\n    kv_state_proof: Bytes,\n    transactions: L2TransactionVec,\n    block_proof: Bytes,\n    withdrawals: WithdrawalRequestVec,\n}\n")),(0,o.kt)("p",null,"Further details about ",(0,o.kt)("inlineCode",{parentName:"p"},"L2Block"),", refer to ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/godwoken/blob/v1.1.0-beta/crates/types/schemas/godwoken.mol#L114"},"this file"),"."),(0,o.kt)("p",null,"An output cell containing the ",(0,o.kt)("inlineCode",{parentName:"p"},"GlobalState")," is the ",(0,o.kt)("strong",{parentName:"p"},"rollup cell"),", as this cell contains all the latest information for a particular Godwoken rollup deployment. Godwoken has no restrictions on the number of the rollup cells permitted in CKB. Multiple Godwoken deployments can be setup in a single CKB blockchain for different purposes. Each Godwoken deployment is thus identified by a rollup cell."),(0,o.kt)("p",null,"In Godwoken, the rollup cell for each Godwoken deployment must use a script called the ",(0,o.kt)("strong",{parentName:"p"},"state validator"),", which is a Godwoken type script. This script is responsible for:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Enforce the ",(0,o.kt)("a",{parentName:"li",href:"https://xuejie.space/2020_02_03_introduction_to_ckb_script_programming_type_id/"},"type ID")," logic. This gives each rollup cell an ID, so that there is no need to refer to rollup cell's ",(0,o.kt)("a",{parentName:"li",href:"https://docs.nervos.org/docs/basics/glossary#outpoint"},"OutPoint"),", which changes each time the rollup cell is updated. The ",(0,o.kt)("a",{parentName:"li",href:"https://docs.nervos.org/docs/basics/glossary#type-script-hash"},"type script hash")," of the rollup cell is also known as ",(0,o.kt)("strong",{parentName:"li"},"rollup type hash")," of the current Godwoken deployment. A rollup type hash can also be considered as a chain ID that uniquely identifies each layer 2 Godwoken blockchain."),(0,o.kt)("li",{parentName:"ul"},"Enforce Godwoken's own checking logic. The state validator type script ensures that the ",(0,o.kt)("inlineCode",{parentName:"li"},"GlobalState")," is indeed calculated from the current L2 block. (",(0,o.kt)("strong",{parentName:"li"},"TODO"),": state validator validation rules).")),(0,o.kt)("p",null,"The state validator type script is the backbone of Godwoken. It ensures all the security checks are performed on chain and all layer 2 funds remain secure in a decentralized environment."),(0,o.kt)("h3",{id:"storage"},"Storage"),(0,o.kt)("p",null,"Godwoken provides an account model to Nervos CKB:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"A 256-bit key-value storage is provided for applications running on Godwoken."),(0,o.kt)("li",{parentName:"ul"},"Godwoken provides a sequential model conceptually: each layer 2 transaction is applied sequentially to the Godwoken storage. Smart contracts in layer 2 transactions are free to read from and write into the storage space.")),(0,o.kt)("p",null,"Given the constant storage requirements in the above transactions, you may wonder where to store all the data. Godwoken leverages ",(0,o.kt)("a",{parentName:"p",href:"https://medium.com/@kelvinfichter/whats-a-sparse-merkle-tree-acda70aeb837"},"Sparse Merkle Tree")," to build the storage space. The rollup cell only contains the root hash of the Sparse Merkle Tree (SMT). State validator verifies that the sparse merkle tree is correctly updated in each layer 2 block. In fact, we have moved one step further here by building an optimized SMT, which can save a lot of space and calculations for CKB's use case. More details can be found ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/sparse-merkle-tree"},"here"),"."),(0,o.kt)("h3",{id:"optimistic-rollup"},"Optimistic Rollup"),(0,o.kt)("p",null,"The workflow of Godwoken is as shown below:"),(0,o.kt)("img",{src:(0,r.Z)("img/gwtx.png"),width:"70%"}),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Individual parties known as ",(0,o.kt)("em",{parentName:"li"},"aggregators")," can collect layer 2 Godwoken transactions(with more details on layer 2 transactions explained below), then pack them into layer 2 blocks and submit them to CKB. Aggregators must stake a certain amount of CKB before they can submit a layer 2 block."),(0,o.kt)("li",{parentName:"ul"},"Each layer 2 block submitted to the chain is initially marked as ",(0,o.kt)("strong",{parentName:"li"},"unfinalized"),". An unfinalized layer 2 block may be challenged by others (known as ",(0,o.kt)("strong",{parentName:"li"},"challengers"),") if it appears malicious, .",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"A challenger starts a challenge request by marking a layer 2 transaction in the layer 2 block as invalid. The challenger must stake a certain amount of CKB in order to create a challenge. Once a challenge request is included in CKB, the challenge phase begins."),(0,o.kt)("li",{parentName:"ul"},"In the challenge phase(detailed below), the original aggregator that submitted the block must prove the marked layer 2 transaction is correct. The aggregator can submit a cancel challenge request to prove its correctness,  which executes the marked layer 2 transaction on chain. CKB only accepts valid transactions on chain, which means the layer 2 transaction must succeed for the cancel challenge request to be committed on chain. In a cancel challenge request, the aggregator can claim staked tokens from the challenger."),(0,o.kt)("li",{parentName:"ul"},"If an aggregator fails to prove the layer 2 transaction is valid by canceling the challenge request, the challenger can then claim tokens staked by the aggregator and revert the chain to the state as it was before the invalid layer 2 block."))),(0,o.kt)("li",{parentName:"ul"},"An unfinalized layer 2 block will be finalized over a certain period of time. Finalized layer 2 blocks will be frozen and cannot be challenged.")),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"}," This is slightly different from the typical optimistic rollover: a transaction being executed here is simply to prove the transaction is valid, and a timeout indicates challenge success in this case.  ")),(0,o.kt)("p",null,"In this design, an aggregator bears the liquidity costs for staking CKB, as well as layer 1 transaction fees for the layer 1 transactions containing layer 2 blocks. In exchange, the aggregator can charge layer 2 transaction fees from layer 2 users. As explained below, layer 2 transaction fees can be paid in CKB or any kind of ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/rfcs/blob/master/rfcs/0025-simple-udt/0025-simple-udt.md"},"sUDT"),". In fact, Godwoken treats CKB and sUDTs as identical in layer 2."),(0,o.kt)("h3",{id:"multiple-block-producers"},"Multiple Block Producers"),(0,o.kt)("p",null,"Godwoken is designed based on the assumption that anyone can propose layer2 blocks. But in the current deployment, Godwoken only has one block producer to sequence transactions and propose new blocks. Supporting multiple block producers (or sequencers) is still an open question for different rollups. In the future, we may introduce a consensus through an upgrade to support multiple block producer coordination."),(0,o.kt)("h2",{id:"actions"},"Actions"),(0,o.kt)("p",null,"This section contains an explanation of the actions that are available on Godwoken, along with detailed technical information on each action."),(0,o.kt)("h3",{id:"deposit"},"Deposit"),(0,o.kt)("p",null,"To use Godwoken, you must first deposit some tokens (CKB or sUDT) from layer 1 to layer 2. This is called a ",(0,o.kt)("strong",{parentName:"p"},"deposit")," action. The deposit action is represented as a layer 1 transaction. It must create a special output cell called a ",(0,o.kt)("strong",{parentName:"p"},"deposit cell"),". ",(0,o.kt)("a",{parentName:"p",href:"https://pudge.explorer.nervos.org/transaction/0xb3aceeb1d84ea5b24e4b8fe339fc6e7814f1e58ebc99237068f22a6924501a1e"},"Here")," is an example of a deposit action. This transaction deposits 10000 CKB to Godwoken. All that matters here is the lock script of output cell #0:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'{\n    "code_hash": "0x50704b84ecb4c4b12b43c7acb260ddd69171c21b4c0ba15f3c469b7d143f6f18",\n    "args": "0x702359ea7f073558921eb50d8c1c77e92f760c8f8656bde4995f26b8963e2dd8a900000014000000340000009d000000a5000000e13f4a9c1642a6c59766eb5509580808bf3917bba104a616df0d207c93050e596900000010000000300000003100000007521d0aa8e66ef441ebc31204d86bb23fc83e9edc58c19dbb1b0ebe64336ec00134000000702359ea7f073558921eb50d8c1c77e92f760c8f8656bde4995f26b8963e2dd8e8ae579256c3b84efb76bbb69cb6bcbef1375f00813a0900000000c002000000",\n    "hash_type": "type"\n}\n')),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"code_hash")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"hash_type")," are pre-determined by each Godwoken deployment. ",(0,o.kt)("inlineCode",{parentName:"p"},"args")," contains two parts: ",(0,o.kt)("strong",{parentName:"p"},"rollup type hash")," and ",(0,o.kt)("strong",{parentName:"p"},"DepositLockArgs"),". The first 32 bytes of ",(0,o.kt)("inlineCode",{parentName:"p"},"args")," contain the ",(0,o.kt)("strong",{parentName:"p"},"rollup type hash")," of the current Godwoken deployment, which functions as a chain ID. The ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/godwoken/blob/v1.1.0-beta/crates/types/schemas/godwoken.mol#L177"},"DepositLockArgs")," data structure is serialized in molecule format as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"table DepositLockArgs {\n    // layer1 lock hash\n    owner_lock_hash: Byte32,\n    layer2_lock: Script,\n    cancel_timeout: Uint64,\n    registry_id: Uint32,\n}\n")),(0,o.kt)("p",null,"The data structure above contains 2 parts of information:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"layer2_lock")," specifies the lock script to be used when Godwoken transfers the tokens to layer 2."),(0,o.kt)("li",{parentName:"ul"},"If Godwoken ignores the request(e.g. when the network becomes bloated), ",(0,o.kt)("inlineCode",{parentName:"li"},"owner_lock_hash")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"cancel_timeout")," provide a way to redeem the tokens. ",(0,o.kt)("inlineCode",{parentName:"li"},"cancel_timeout")," specifies a timeout parameter in CKB's ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/nervosnetwork/rfcs/blob/master/rfcs/0017-tx-valid-since/0017-tx-valid-since.md"},"since")," format. When the timeout has expired, the user can create another request to cancel the deposit action and redeem the tokens for other uses. ",(0,o.kt)("inlineCode",{parentName:"li"},"owner_lock_hash")," is used to provide the token owner's identity in case of a cancel deposit action.")),(0,o.kt)("p",null,"Godwoken periodically collects all live deposit cells, and includes them in layer 2 blocks. It transforms each deposit cell to a ",(0,o.kt)("strong",{parentName:"p"},"custodian cell"),", creates (if one does not exist) a layer 2 account correspondingly based on the ",(0,o.kt)("inlineCode",{parentName:"p"},"layer2_lock")," used in ",(0,o.kt)("inlineCode",{parentName:"p"},"DepositLockArgs"),", and then puts the newly deposited tokens in this account."),(0,o.kt)("p",null,"Custodian cells contain all the tokens that are managed internally in Godwoken. This ",(0,o.kt)("a",{parentName:"p",href:"https://pudge.explorer.nervos.org/transaction/0x6c627c00d215ddc2dc21b6b40c03be8c14d4b7fca06e4d84b97e4bb526e5b135"},"transaction")," contains a custodian cell in its output cell #2. Like a deposit cell, a custodian cell is represented by its lock script:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'{\n    "code_hash": "0x85ae4db0dd83f428a31deb342e4000af37ce2c9645d9e619df00096e3c50a2bb",\n    "args": "0x702359ea7f073558921eb50d8c1c77e92f760c8f8656bde4995f26b8963e2dd8e1000000100000003000000038000000595a1405676547c8ddc083f3413d58d65a1bb9275b5a923ec61dce4e572647cc4c6f000000000000a900000014000000340000009d000000a5000000e13f4a9c1642a6c59766eb5509580808bf3917bba104a616df0d207c93050e596900000010000000300000003100000007521d0aa8e66ef441ebc31204d86bb23fc83e9edc58c19dbb1b0ebe64336ec00134000000702359ea7f073558921eb50d8c1c77e92f760c8f8656bde4995f26b8963e2dd8e8ae579256c3b84efb76bbb69cb6bcbef1375f00813a0900000000c002000000",\n    "hash_type": "type"\n}\n')),(0,o.kt)("p",null,"Like deposit cells, custodian cells have pre-determined ",(0,o.kt)("inlineCode",{parentName:"p"},"code_hash")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"hash_type")," based on Godwoken deployments. The first 32 bytes in ",(0,o.kt)("inlineCode",{parentName:"p"},"args")," contain the rollup type hash as well. What's different here is that ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/godwoken/blob/v1.1.0-beta/crates/types/schemas/godwoken.mol#L188"},"CustodianLockArgs")," is used to fill the remaining part of ",(0,o.kt)("inlineCode",{parentName:"p"},"args"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"table CustodianLockArgs {\n    deposit_block_hash: Byte32,\n    deposit_block_number: Uint64,\n    // used for revert this cell to deposit request cell\n    // after finalize, this lock is meaningless\n    deposit_lock_args: DepositLockArgs,\n}\n")),(0,o.kt)("p",null,"As noted, a custodian cell contains the original deposit information, as well the layer 2 block information in which the original deposit cell is processed."),(0,o.kt)("h3",{id:"layer-2-transfer"},"Layer 2 Transfer"),(0,o.kt)("p",null,"Once tokens have been deposited and processed by Godwoken, they can be used in layer 2 Godwoken blockchain. A layer 2 Godwoken transaction uses a totally different structure from a layer 1 CKB transaction:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"table RawL2Transaction {\n    // chain id\n    chain_id: Uint64,\n    from_id: Uint32,\n    to_id: Uint32,\n    nonce: Uint32,\n    args: Bytes,\n}\n\ntable L2Transaction {\n    raw: RawL2Transaction,\n    signature: Bytes,\n}\n")),(0,o.kt)("p",null,"Full definition and related types can be found in ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/godwoken/blob/v1.1.0-beta/crates/types/schemas/godwoken.mol#L69-L81"},"this file"),"."),(0,o.kt)("p",null,"There are no cells in the layer 2 Godwoken transaction structure. There is only 32-bit integer value representing the accounts, a 32-bit nonce which is not used in layer 1 CKB, as well as a single variable-length ",(0,o.kt)("inlineCode",{parentName:"p"},"args")," part. This layer 2 transaction structure will be detailed piece by piece."),(0,o.kt)("p",null,"While all operations on Godwoken can be represented as a ",(0,o.kt)("inlineCode",{parentName:"p"},"L2Transaction")," in the above format, let's start from a simple transfer operation:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'{\n  "raw": {\n    "chain_id": "0x116e9",\n    "from_id": "0x2",\n    "to_id": "0x1",\n    "nonce": "0x3",\n    "args": "0x01000000040000009001000000000000000000000000000064000000000000000000000000000000"\n  },\n  "signature": "0x306d9240d6b18eaa29c83b5f4603c9cbd04402d09c3c38063a87c35b9bfe4ce16ffe64b9f20e306a59819cecfd9b72d3f62888305155bd3e48e40742a3cd8a8901"\n}\n')),(0,o.kt)("p",null,"This is the JSON representation of ",(0,o.kt)("inlineCode",{parentName:"p"},"L2Transaction")," data structure. ",(0,o.kt)("inlineCode",{parentName:"p"},"args")," contains a variable-length, free formatted transaction argument data that is interpreted depending on the values of ",(0,o.kt)("inlineCode",{parentName:"p"},"to_id"),". In this particular example, ",(0,o.kt)("inlineCode",{parentName:"p"},"args")," contains ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/godwoken/blob/v1.1.0-beta/crates/types/schemas/godwoken.mol#L260"},"SUDTTransfer")," data structure in the molecule serialization format:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"table SUDTTransfer {\n    // Godwoken registry address: (registry_id (4 bytes) | address len(4 bytes) | address)\n    to_address: Bytes,\n    amount: Uint256,\n    // paid fee(ckb)\n    fee: Fee,\n}\n")),(0,o.kt)("p",null,"A JSON representation for this data structure is:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'{\n  "type": "SUDTTransfer",\n  "value": {\n      "to_address": "0x0200000014000000bb1d13450cfa630728d0390c99957c6948bf7d19",\n      "amount": "0x190",\n      "fee": "0x64"\n  }\n}\n')),(0,o.kt)("p",null,"In this example, we are transferring 400 shannons (denoted by ",(0,o.kt)("inlineCode",{parentName:"p"},"to_id")," 0x1) from account 0x2(denoted by ",(0,o.kt)("inlineCode",{parentName:"p"},"from_id"),") to account 0x0200000014000000bb1d13450cfa630728d0390c99957c6948bf7d19 (denoted by ",(0,o.kt)("inlineCode",{parentName:"p"},"to_address")," in ",(0,o.kt)("inlineCode",{parentName:"p"},"SUDTTransfer"),"). In addition, we may need to pay 100 shannons as layer 2 transaction fees. The next 2 sections will discuss layer 2 transaction in more detail."),(0,o.kt)("h3",{id:"account-locks"},"Account Locks"),(0,o.kt)("p",null,"An account lock controls how a signature for a layer 2 transaction is validated. Recall that a deposit cell actually includes a layer 2 lock script in its ",(0,o.kt)("inlineCode",{parentName:"p"},"DepositLockArgs"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"table DepositLockArgs {\n    layer2_lock: Script,\n\n    // ...\n    // other fields are omitted\n}\n")),(0,o.kt)("p",null,"When Godwoken sees a ",(0,o.kt)("inlineCode",{parentName:"p"},"layer2_lock")," in a ",(0,o.kt)("inlineCode",{parentName:"p"},"DepositLockArgs")," data structure, it first queries its internal storage to locate an account using the particular layer 2 lock script. Godwoken will create a new account for this lock script if there is none, and assign a 32-bit integer account ID to it. Godwoken enforces a one-to-one mapping between a layer 2 lock script and account ID:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Given an account ID, one can look up the layer 2 lock script in Godwoken."),(0,o.kt)("li",{parentName:"ul"},"Given a layer 2 lock script, there can be at most one account ID using that lock script in the current Godwoken deployment")),(0,o.kt)("p",null,"This provides some handy consequences for us:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Users do not need to remember their account IDs in a Godwoken deployment. As long as they know their wallet addresses, they will be able to query the correct account ID when translated to layer 2 lock script;"),(0,o.kt)("li",{parentName:"ul"},"A layer 2 transaction can only include the account ID, which can be used to query the actual layer 2 lock script. This results in a smaller layer 2 transaction and bigger throughput.")),(0,o.kt)("p",null,"Users can choose any lock script to use in layer 2 while still minimizing layer 2 transaction size. This approach offers the advantage that layer 1 is as flexible as layer 2."),(0,o.kt)("p",null,"We developed Godwoken in conjunction with Polyjuice, our Ethereum-compatible solution. Furthermore, we provide an Ethereum compatible lock that enables you to use ",(0,o.kt)("a",{parentName:"p",href:"https://metamask.io/"},"MetaMask")," in conjunction with Polyjuice. In practice, this feature has a broader application with different layer 2 locks. An example of this would be a lock that implements the EOS signature validation logic that enables an EOS wallet to call Ethereum dApps through Polyjuice. The entire interoperability power of Nervos CKB is preserved in Godwoken as well."),(0,o.kt)("p",null,"Now we can derive the signature validation rule for a layer 2 Godwoken transaction:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Godwoken locates the corresponding layer 2 lock script by using ",(0,o.kt)("inlineCode",{parentName:"li"},"from_id")," in the layer 2 transaction."),(0,o.kt)("li",{parentName:"ul"},"The layer 2 lock script is executed to validate the layer 2 transaction.")),(0,o.kt)("p",null,'The above flow has one quirk: the current version of Godwoken uses the optimistic rollup design. Due to the "optimistic" nature, the layer 2 lock script is not typically executed on chain. It is only executed when a challenger initiates a challenge request on chain, and an aggregator validates the validity of the layer 2 transaction through a cancel challenge request. Hence the way to build a layer 2 lock script is also slightly different. An example of such a script can be found ',(0,o.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/godwoken-scripts/blob/master/contracts/eth-account-lock/src/entry.rs#L24"},"here"),"."),(0,o.kt)("h3",{id:"backend"},"Backend"),(0,o.kt)("p",null,"After the signature has been verified, another problem arises: how does Godwoken calculate the next on-layer2-chain state? ",(0,o.kt)("strong",{parentName:"p"},"Backends")," in Godwoken handle this task."),(0,o.kt)("p",null,"Godwoken actually has 2 kinds of accounts:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Typical user accounts denoted by an account lock."),(0,o.kt)("li",{parentName:"ul"},"Contract accounts denoted by a backend script.")),(0,o.kt)("p",null,"This design is quite similar to the EOA vs. contract account in Ethereum, which is appropriate because Godwoken was inspired by Ethereum."),(0,o.kt)("p",null,"A typical user account is a balance owned by the user, while a contract account provides storage for the on-chain smart contracts. The user account is generated from a general lock script with a user's public key hash. The smart contract for the contract account is generated from a backend with some special script args. In the Nervos ecosystem, smart contracts are also represented using the unified ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/godwoken/blob/v1.1.0-beta/crates/types/schemas/blockchain.mol#L32"},"script")," data structure: the combination of ",(0,o.kt)("inlineCode",{parentName:"p"},"code_hash")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"hash_type")," in a script identifies the backend, while args provides specific contract account arguments. "),(0,o.kt)("p",null,"In the light of the above, the following rule can be introduced for executing backends:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Godwoken locates the corresponding backend script by using ",(0,o.kt)("inlineCode",{parentName:"li"},"to_id")," in the layer 2 transaction;"),(0,o.kt)("li",{parentName:"ul"},"The backend script is executed to calculate the state after applying the current transaction.")),(0,o.kt)("p",null,"Similar to account locks, the above rule is more of a conceptual rule. The actual backend script is only executed on-chain in a cancel challenge request."),(0,o.kt)("p",null,"Here are a few examples of backends:"),(0,o.kt)("h3",{id:"sudt"},"SUDT"),(0,o.kt)("p",null,"sUDT is the most common backend in Godwoken and all tokens, whether they are CKB or layer 1 sUDTs, are represented as layer 2 sUDT types. A layer 2 sUDT backend script is defined by the following specification:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"code_hash")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"hash_type")," are pre-determined by each Godwoken deployment."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"args")," contains the script hash of layer 1 sUDT type script. In case CKB is used, ",(0,o.kt)("inlineCode",{parentName:"li"},"args")," will be ",(0,o.kt)("inlineCode",{parentName:"li"},"0x0000000000000000000000000000000000000000000000000000000000000000"),".")),(0,o.kt)("p",null,"In this way, we can correlate layer 1 sUDT type scripts with its corresponding layer 2 sUDT backend script."),(0,o.kt)("p",null,"The layer 2 sUDT backend provides ",(0,o.kt)("a",{parentName:"p",href:"https://eips.ethereum.org/EIPS/eip-20"},"ERC20")," compatible interface. You may not use Solidity and EVM, but a similar API is available."),(0,o.kt)("p",null,"Layer 2 transaction using a sUDT backend must provide a ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/godwoken/blob/v1.1.0-beta/crates/types/schemas/godwoken.mol#L250"},"SUDTArgs")," data structure serialized in molecule format in layer 2 transaction args. The two supported actions for sUDT backend is ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/godwoken/blob/v1.1.0-beta/crates/types/schemas/godwoken.mol#L255"},"SUDTQuery")," and ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/godwoken/blob/v1.1.0-beta/crates/types/schemas/godwoken.mol#L260"},"SUDTTransfer"),". Later versions may expand this list to include other ERC20 operations."),(0,o.kt)("p",null,"Note that Godwoken typically creates sUDT contract accounts when processing deposit cells. It doesn't create new contract accounts using sUDT as the backend script."),(0,o.kt)("p",null,"An implementation for the layer 2 sUDT backend can be found ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/godwoken-scripts/blob/v1.1.0-beta/c/contracts/sudt.c"},"here"),"."),(0,o.kt)("h3",{id:"metacontract"},"MetaContract"),(0,o.kt)("p",null,"MetaContract is a special backend in Godwoken:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"It is reserved as account ID 0;"),(0,o.kt)("li",{parentName:"ul"},"You cannot create a new contract account using MetaContract as the backend.")),(0,o.kt)("p",null,"The sole purpose of MetaContract now is to create a contract account given a particular backend."),(0,o.kt)("p",null,"Here is the JSON representation for a layer 2 transaction, which invokes MetaContract to create a Polyjuice root contract account:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'{\n  "raw": {\n    "chain_id": "0x116e9",\n    "from_id": "0x2",\n    "to_id": "0x0",\n    "nonce": "0x4",\n    "args": "0x0000000041000000080000003900000010000000300000003100000020814f4f3ebaf8a297d452aa38dbf0f9cb0b2988a87cb6119c2497de817e7de9000400000001000000"\n  },\n  "signature": "0xc62d332f398323b972c5ee5c4481661ca9d17125af6f61e5220e2fbfe3bd325a0cc6c3ac174950dc1282d5e6059fc08838b9040ed7eca0ad13474af869f25a8701"\n}\n')),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"args")," part in this transaction contains a ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/godwoken/blob/v1.1.0-beta/crates/types/schemas/godwoken.mol#L232"},"MetaContractArgs")," data structure serialized in molecule format. A JSON representation for ",(0,o.kt)("inlineCode",{parentName:"p"},"args")," is as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'{\n  "type": "CreateAccount",\n  "value": {\n      "script": {\n          "code_hash": "0x20814f4f3ebaf8a297d452aa38dbf0f9cb0b2988a87cb6119c2497de817e7de9",\n          "hash_type": "data",\n          "args": "0x01000000"\n      }\n  }\n}\n')),(0,o.kt)("p",null,"The details of this transaction will be explained in ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/godwoken/blob/develop/docs/life_of_a_polyjuice_transaction.md"},"Life of a Polyjuice Transaction"),"."),(0,o.kt)("h3",{id:"polyjuice"},"Polyjuice"),(0,o.kt)("p",null,"Polyjuice is the main backend used now in Godwoken. It allows us to create a contract account using EVM bytecode. The resulting account will be able to execute smart contracts written for Ethereum. Polyjuice aims at 100% compatibility at EVM level, meaning all applications that are runnable on Ethereum can be run on Godwoken powered by Polyjuice."),(0,o.kt)("p",null,"For more details on Polyjuice, refer to ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/godwoken/blob/develop/docs/life_of_a_polyjuice_transaction.md"},"Life of a Polyjuice Transaction"),"."),(0,o.kt)("h3",{id:"managing-account-locks--backends"},"Managing Account Locks & Backends"),(0,o.kt)("p",null,"It is possible to create as many accounts as you like. However, Godwoken now only supports whitelisted account locks and backends for security reasons. The list now includes:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Ethereum compatible account lock"),(0,o.kt)("li",{parentName:"ul"},"MetaContract backend"),(0,o.kt)("li",{parentName:"ul"},"Layer 2 sUDT backend"),(0,o.kt)("li",{parentName:"ul"},"ETH Registry backend"),(0,o.kt)("li",{parentName:"ul"},"Polyjuice backend")),(0,o.kt)("p",null,"If there is a particular account lock or backend that you like, please do not hesitate to let us know. We are interested in a future where an EOS wallet can control an Ethereum application, or a BTC wallet can control a ",(0,o.kt)("a",{parentName:"p",href:"https://www.diem.com/en-us/"},"Diem")," application. This is all possible with Godwoken thanks to the composability of account locks and backends."),(0,o.kt)("h3",{id:"withdraw"},"Withdraw"),(0,o.kt)("p",null,"The ",(0,o.kt)("strong",{parentName:"p"},"withdraw")," action enables you to withdraw tokens from layer 2 back to layer 1. A withdrawal action uses the following data structure:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"struct RawWithdrawalRequest {\n    nonce: Uint32,\n    // chain id\n    chain_id: Uint64,\n    // CKB amount\n    capacity: Uint64,\n    // SUDT amount\n    amount: Uint128,\n    sudt_script_hash: Byte32,\n    // layer2 account_script_hash\n    account_script_hash: Byte32,\n    // withdrawal registry ID\n    registry_id: Uint32,\n    // layer1 lock to withdraw after challenge period\n    owner_lock_hash: Byte32,\n    // withdrawal fee, paid to block producer\n    fee: Uint128,\n}\n\nvector WithdrawalRequestVec <WithdrawalRequest>;\n\nstruct WithdrawalRequest {\n    raw: RawWithdrawalRequest,\n    signature: Bytes,\n}\n")),(0,o.kt)("p",null,"The full definition and related types can be found in ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/godwoken/blob/v1.1.0-beta/crates/types/schemas/godwoken.mol#L136-L160"},"this file"),"."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"WithdrawalRequest")," uses ",(0,o.kt)("inlineCode",{parentName:"p"},"account_script_hash")," as a key to locate the account lock and perform the same signature verification flow as layer 2 transaction. The Withdraw action can be used to withdraw CKB and a layer 1 sUDT type simultaneously. Due to the constraint of CKB's cell model, Godwoken currently requires a minimum of 400 CKBytes  for each withdrawal."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"WithdrawalRequest")," contains additional fields that are used to fulfill a special feature of Godwoken, the selling of withdrawn tokens. This is explained in the next section."),(0,o.kt)("p",null,"Here is the JSON representation of a ",(0,o.kt)("inlineCode",{parentName:"p"},"WithdrawalRequest"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'{\n  "raw": {\n    "nonce": "0x3",\n    "chain_id": "0x116e9",\n    "capacity": "0x9502f9000",\n    "amount": "0x0",\n    "registry_id": "0x2",\n    "sudt_script_hash": "0x0000000000000000000000000000000000000000000000000000000000000000",\n    "account_script_hash": "0x167d7855f41c343e2064fc5b62f7d640d2d74a8255766bff62f1f5fc63ab4c58",\n    "owner_lock_hash": "0xa35eda3e71e86e4e22b7924012b6a6e90809dc7a68621d5f7a7c40eea01be45e",\n  },\n  "signature": "0xef1a36bb7cbd3884bf404811ed0e534b4ef3f87abe52f44838018b3af7c7a5534cd1b0b5c1cb55a32b122278ebc9fe37a92e2442ba83160e778163eafd444b9700"\n}\n')))}u.isMDXComponent=!0}}]);